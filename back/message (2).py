import os
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import RetrievalQA
from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.prompts import PromptTemplate

# üîê Auth Gemini
os.environ["GOOGLE_API_KEY"] = "AIzaSyDDNuJYh7Ko-pQmBQIFhvjlRfiiVDGwbrA"  # Replace with your actual key

# üìÑ Load .md document directly
print("üìÑ Chargement des documents...")
try:
    loader = TextLoader("data/rapport_final_Imen_Ayari_20250731_095306 (1).md", encoding='utf-8')
    docs = loader.load()
    print(f"‚úÖ {len(docs)} documents charg√©s")
except FileNotFoundError:
    print("‚ùå Fichier non trouv√© ! V√©rifiez le chemin du fichier")
    exit()
except Exception as e:
    print(f"‚ùå Erreur lors du chargement du fichier : {e}")
    exit()

# ‚úÇÔ∏è Split documents into chunks
splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
split_docs = splitter.split_documents(docs)

# üîé Embeddings + FAISS
embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")
vectorstore = FAISS.from_documents(split_docs, embeddings)

# üß† Gemini LLM
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash-exp", temperature=0.3)

# üîÑ Retriever
retriever = vectorstore.as_retriever()

# üìù French prompt templates
CAREER_PROMPT = """
Vous √™tes un assistant en d√©veloppement commercial pr√©parant un email ou un message LinkedIn personnalis√©.
Utilisez le CONTEXTE suivant pour g√©n√©rer un message professionnel ax√© sur la CARRI√àRE de la personne.

CONTEXTE :
{context}

INSTRUCTIONS :
- Concentrez-vous sur leur parcours professionnel, leurs r√©alisations et leur expertise
- Mentionnez des r√¥les sp√©cifiques, des entreprises ou des progressions de carri√®re
- Faites r√©f√©rence √† leur exp√©rience et leur formation
- Utilisez leur nom si disponible
- Soyez amical et professionnel
- Limitez √† 180 mots
- Terminez par un appel √† l'action pour planifier une rencontre

Retournez uniquement le corps du message.
"""

PROJECTS_PROMPT = """
Vous √™tes un assistant en d√©veloppement commercial pr√©parant un email ou un message LinkedIn personnalis√©.
Utilisez le CONTEXTE suivant pour g√©n√©rer un message professionnel ax√© sur les PROJETS de la personne.

CONTEXTE :
{context}

INSTRUCTIONS :
- Concentrez-vous sur les projets sp√©cifiques, les travaux techniques ou les initiatives mentionn√©es
- Mettez en avant les technologies, m√©thodologies ou innovations utilis√©es
- Mentionnez les r√©sultats mesurables ou l'impact commercial
- Utilisez leur nom si disponible
- Soyez amical et professionnel
- Limitez √† 180 mots
- Terminez par un appel √† l'action pour planifier une rencontre

Retournez uniquement le corps du message.
"""

SENTIMENT_PROMPT = """
Vous √™tes un assistant en d√©veloppement commercial pr√©parant un email ou un message LinkedIn personnalis√©.
Utilisez le CONTEXTE suivant pour g√©n√©rer un message professionnel ax√© sur les VALEURS/INT√âR√äTS de la personne.

CONTEXTE :
{context}

INSTRUCTIONS :
- Concentrez-vous sur leurs int√©r√™ts, valeurs et motivations personnelles
- Faites r√©f√©rence √† leurs perspectives sur l'industrie ou leur leadership intellectuel
- Cr√©ez une connexion √©motionnelle via des valeurs partag√©es
- Utilisez leur nom si disponible
- Soyez amical et professionnel
- Limitez √† 180 mots
- Terminez par un appel √† l'action pour planifier une rencontre

Retournez uniquement le corps du message.
"""

RECENT_POSTS_PROMPT = """
Vous √™tes un assistant en d√©veloppement commercial pr√©parant un message LinkedIn personnalis√©.
Utilisez le CONTEXTE suivant pour g√©n√©rer un message professionnel ax√© sur les PUBLICATIONS R√âCENTES/ACTIVIT√âS de la personne.

CONTEXTE :
{context}

INSTRUCTIONS :
- Concentrez-vous sur leurs publications r√©centes, activit√©s sur les r√©seaux sociaux ou contenu r√©cent
- Mentionnez des sujets, id√©es ou perspectives sp√©cifiques qu'ils ont partag√©s
- Faites r√©f√©rence √† des mises √† jour professionnelles ou annonces r√©centes
- Montrez que vous suivez leur leadership intellectuel
- Reliez leur activit√© r√©cente √† une collaboration potentielle
- Utilisez leur nom si disponible
- Soyez amical et professionnel
- Limitez √† 180 mots
- Terminez par un appel √† l'action pour planifier une rencontre

Retournez uniquement le corps du message.
"""

CRITICAL_DATA_PROMPT = """
Vous √™tes un assistant en d√©veloppement commercial pr√©parant un email ou un message LinkedIn personnalis√©.
Utilisez le CONTEXTE suivant pour g√©n√©rer un message professionnel abordant les DONN√âES PERSONNELLES et CRITIQUES aussi que les Points d'attention de la personne.

CONTEXTE :
{context}

INSTRUCTIONS :
- Mentionnez de mani√®re respectueuse les donn√©es personnelles pertinentes (par exemple, formation, localisation,choix du carri√©re) sans r√©v√©ler d'informations sensibles
- Abordez les critiques ou d√©fis mentionn√©s dans le rapport de mani√®re constructive, en mettant l'accent sur des opportunit√©s d'am√©lioration
- Reliez les critiques √† des solutions ou collaborations potentielles
- Utilisez leur nom si disponible
- Soyez amical, professionnel et sensible √† la confidentialit√©
- Limitez √† 180 mots
- Terminez par un appel √† l'action pour planifier une rencontre

Retournez uniquement le corps du message.
"""

# üîç Function to check for LinkedIn activity
def has_linkedin_activity(docs):
    """Check if the document contains LinkedIn activity with recent posts"""
    for doc in docs:
        content = doc.page_content.lower()
        if "linkedin" in content and ("post" in content or "publication" in content or "activit√©" in content):
            return True
    return False

# üéØ Function to generate message based on focus area
def generate_outreach_message(focus_area):
    """Generate personalized outreach message based on focus area"""
    
    # Select prompt template
    if focus_area == "career":
        prompt_template = CAREER_PROMPT
        query = "G√©n√©rez un email ou message LinkedIn personnalis√© ax√© sur la carri√®re et l'exp√©rience professionnelle de la personne."
    elif focus_area == "projects":
        prompt_template = PROJECTS_PROMPT
        query = "G√©n√©rez un email ou message LinkedIn personnalis√© ax√© sur les projets et r√©alisations techniques de la personne."
    elif focus_area == "sentiment":
        prompt_template = SENTIMENT_PROMPT
        query = "G√©n√©rez un email ou message LinkedIn personnalis√© ax√© sur les valeurs et int√©r√™ts de la personne."
    elif focus_area == "recent_posts":
        prompt_template = RECENT_POSTS_PROMPT
        query = "G√©n√©rez un message LinkedIn personnalis√© ax√© sur les publications r√©centes, activit√©s sur les r√©seaux sociaux et contenu r√©cent de la personne."
    elif focus_area=="critical data":
        prompt_template=CRITICAL_DATA_PROMPT
        query = "G√©n√©rez un email ou message LinkedIn personnalis√© ax√© sur les donn√©es personnelles et critiques de la personne."   
    else:
        raise ValueError("L'axe doit √™tre 'career', 'projects', 'sentiment' ou 'recent_posts'")
    
    # Create prompt
    prompt = PromptTemplate(template=prompt_template, input_variables=["context"])
    
    # Create RAG chain
    rag_chain = RetrievalQA.from_chain_type(
        llm=llm,
        retriever=retriever,
        chain_type="stuff",
        return_source_documents=True,
        chain_type_kwargs={"prompt": prompt}
    )
    
    # Generate result
    result = rag_chain.invoke({"query": query})
    
    # Check for LinkedIn activity if focus is recent_posts
    if focus_area == "recent_posts" and has_linkedin_activity(split_docs):
        message_type = "Message LinkedIn"
    else:
        message_type = "Email"
    
    return {"message": result["result"], "type": message_type}

if __name__ == "__main__":
    while True:
        print("\n" + "="*50)
        print("üéØ G√âN√âRATEUR INTERACTIF DE MESSAGES")
        print("="*50)
        print("1. Message ax√© sur la carri√®re")
        print("2. Message ax√© sur les projets")
        print("3. Message ax√© sur les valeurs/int√©r√™ts")
        print("4. Message ax√© sur les publications r√©centes")
        print("5. message ax√© sur les donn√©es critiques")
        print("0. Quitter")
        
        choice = input("\nüëâ S√©lectionnez une option (0-5) : ").strip()
        if choice == "0":
            print("üëã Au revoir !")
            break
        elif choice == "1":
            result = generate_outreach_message("career")
            print(f"\nüì® {result['type']} ax√© sur la carri√®re :\n{result['message']}")
        elif choice == "2":
            result = generate_outreach_message("projects")
            print(f"\nüì® {result['type']} ax√© sur les projets :\n{result['message']}")
        elif choice == "3":
            result = generate_outreach_message("sentiment")
            print(f"\nüì® {result['type']} ax√© sur les valeurs/int√©r√™ts :\n{result['message']}")
        elif choice == "4":
            result = generate_outreach_message("recent_posts")
            print(f"\nüì® {result['type']} ax√© sur les publications r√©centes :\n{result['message']}")
        elif choice == "5":
            result = generate_outreach_message("critical data")
            print(f"\nüì® {result['type']} ax√© sur les donn√©es critiques :\n{result['message']}")    
        else:
            print("‚ùå Option invalide. Veuillez r√©essayer.")