import json
import os
import glob
from datetime import datetime
import re
import requests  # Utilisation de requests pour les appels API
import sys  # Pour r√©cup√©rer les arguments de la ligne de commande


class LinkedInProfileSummarizer:
    """
    Agent charg√© de trouver le profil LinkedIn (fichier JSON),
    de l'analyser avec l'API Gemini pour en extraire une synth√®se professionnelle,
    et de sauvegarder cette synth√®se dans un fichier Markdown.
    """
    # Cl√© API Gemini. Il est recommand√© d'utiliser une variable d'environnement pour la s√©curit√©.
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyABnrK3uWS4UNs_19WxlhN6SXA74TT58PA")
    GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + GEMINI_API_KEY

    def __init__(self):
        """
        Initialise l'agent d'analyse de profils LinkedIn.
        """
        if not self.GEMINI_API_KEY or self.GEMINI_API_KEY == "VOTRE_CL√â_API_GEMINI_ICI":
            raise ValueError(
                "Cl√© API Gemini non configur√©e. Veuillez la d√©finir dans le script ou via la variable d'environnement GEMINI_API_KEY.")
        print("Agent d'analyse de profils LinkedIn initialis√©.")

    def _get_linkedin_reports_dir(self):
        """D√©termine le r√©pertoire o√π se trouvent les rapports LinkedIn."""
        # Le script est dans dating/linkedin, le JSON est dans dating
        return os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    def load_profile_data(self, specific_file_path: Optional[str] = None) -> Optional[Tuple[Dict, str]]:
        """
        Charge un fichier JSON de profil sp√©cifique ou le plus r√©cent dans le dossier sp√©cifi√©.

        Args:
            specific_file_path: Chemin absolu ou relatif vers un fichier JSON sp√©cifique.
                                Si None, cherche le fichier le plus r√©cent dans le r√©pertoire par d√©faut.

        Returns:
            Un tuple contenant les donn√©es du profil (dict) et le nom du fichier,
            ou None si aucun fichier n'est trouv√© ou en cas d'erreur.
        """
        if specific_file_path:
            filepath = specific_file_path
            print(f"üîç Chargement du fichier de profil sp√©cifi√©: '{filepath}'...")
            if not os.path.exists(filepath):
                print(f"‚ùå Erreur: Le fichier '{filepath}' n'existe pas.")
                return None
        else:
            folder = self._get_linkedin_reports_dir()
            print(f"üîç Recherche du fichier de profil JSON le plus r√©cent dans le dossier '{folder}'...")

            # Rechercher tous les fichiers JSON dans le dossier
            json_files = glob.glob(os.path.join(folder, "*.json"))

            if not json_files:
                print("‚ùå Aucun fichier JSON de profil trouv√©.")
                return None

            # Tente de trouver le fichier le plus r√©cent bas√© sur la date dans le nom
            datetime_pattern = r'(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})\.json$'
            latest_file_name = None
            latest_datetime = None

            for file in json_files:
                match = re.search(datetime_pattern, os.path.basename(file))
                if match:
                    try:
                        file_datetime = datetime.strptime(match.group(1), "%Y-%m-%d_%H-%M-%S")
                        if latest_datetime is None or file_datetime > latest_datetime:
                            latest_datetime = file_datetime
                            latest_file_name = file
                    except ValueError:
                        continue  # Ignore les fichiers avec un format de date invalide

            # Si aucun fichier avec un nom dat√© n'est trouv√©, utilise la date de modification
            if not latest_file_name:
                print("üí° Aucun fichier avec horodatage trouv√©. Utilisation du fichier modifi√© le plus r√©cemment.")
                latest_file_name = max(json_files, key=os.path.getmtime)

            filepath = latest_file_name  # filepath est d√©j√† le chemin complet ici

        print(f"üìÑ Fichier √† charger: {os.path.basename(filepath)}")

        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"‚úÖ Donn√©es du profil charg√©es avec succ√®s depuis '{os.path.basename(filepath)}'.")
            return data, os.path.basename(filepath)  # Retourne le nom de base du fichier
        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur de d√©codage JSON dans le fichier {os.path.basename(filepath)}: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Erreur inattendue lors de la lecture du fichier {os.path.basename(filepath)}: {e}")
            return None

    def summarize_with_llm(self, profile_data: Dict) -> Optional[str]:
        """
        G√©n√®re une synth√®se du profil en utilisant un prompt sp√©cifique avec l'API Gemini.

        Args:
            profile_data: Un dictionnaire contenant les donn√©es du profil.

        Returns:
            La synth√®se textuelle g√©n√©r√©e par le LLM ou None en cas d'erreur.
        """
        print("ü§ñ Analyse du profil en cours avec le LLM (Gemini)...")

        # Construction du prompt
        prompt = f"""Tu es un assistant qui extrait et formate les informations professionnelles cl√©s des profils utilisateur.

Voici le profil:
- Nom: {profile_data.get("name")}
- √Ä propos: {profile_data.get("about")}
- Titre du poste: {profile_data.get("job_title")}
- Entreprise: {profile_data.get("company")}

Exp√©rience:
{json.dumps(profile_data.get("experiences", []), indent=2, ensure_ascii=False)}

√âducation:
{json.dumps(profile_data.get("educations", []), indent=2, ensure_ascii=False)}

Posts R√©cents:
{json.dumps(profile_data.get("recent_posts", []), indent=2, ensure_ascii=False)}

‚û°Ô∏è Extrais les informations suivantes dans un format clair et structur√© (points ou liste num√©rot√©e):

1. Nom Complet
2. Titre du Poste Actuel et Entreprise
3. Ann√©es d'exp√©rience totale (estimation si n√©cessaire)
4. Comp√©tences cl√©s ou domaines d'expertise
5. R√©sum√© du parcours √©ducatif
6. R√©alisations ou projets notables (tir√©s des exp√©riences/posts)
7. Tout r√¥le de leadership ou impact dans l'industrie
8. Sujets d'int√©r√™t bas√©s sur les posts r√©cents

Formate ta r√©ponse avec des titres clairs et des points.
"""

        gemini_api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={self.GEMINI_API_KEY}"

        payload = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "temperature": 0.2,
                "maxOutputTokens": 2048,
            }
        }

        try:
            response = requests.post(gemini_api_url, headers={'Content-Type': 'application/json'}, json=payload)
            response.raise_for_status()

            api_response = response.json()

            # Extraction de la r√©ponse textuelle
            summary = api_response['candidates'][0]['content']['parts'][0]['text']

            print("‚úÖ Synth√®se du profil g√©n√©r√©e avec succ√®s.")
            return summary.strip()

        except requests.exceptions.HTTPError as err:
            print(f"‚ùå Erreur HTTP lors de l'appel √† l'API Gemini: {err}")
            print(f"D√©tails de la r√©ponse: {response.text}")
            return None
        except Exception as e:
            print(f"‚ùå Erreur inattendue lors de l'analyse LLM: {e}")
            return None

    def save_summary(self, summary: str, original_filename: str) -> str:
        """
        Sauvegarde la synth√®se g√©n√©r√©e dans un fichier Markdown.
        Le fichier est sauvegard√© dans le m√™me r√©pertoire que ce script.

        Args:
            summary: Le texte de la synth√®se.
            original_filename: Le nom du fichier JSON original pour cr√©er le nom du fichier de sortie.

        Returns:
            Le chemin complet du fichier de synth√®se sauvegard√©.
        """
        # Cr√©e un nom de fichier .md √† partir du nom de fichier .json
        md_filename = os.path.splitext(original_filename)[0] + ".md"
        # Sauvegarde dans le r√©pertoire du script summarize_profiles.py
        filepath = os.path.join(os.path.dirname(os.path.abspath(__file__)), md_filename)

        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"# Synth√®se Professionnelle du Profil : {original_filename.replace('.json', '')}\n\n")
                f.write(f"**Date de g√©n√©ration :** {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}\n\n")
                f.write("---\n\n")
                f.write(summary)

            print(f"üíæ Synth√®se sauvegard√©e dans: {filepath}")
            return filepath
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde de la synth√®se: {e}")
            return ""

    def run_complete_summary(self, specific_file_path: Optional[str] = None):
        """
        Ex√©cute le processus complet : chargement, analyse et sauvegarde.

        Args:
            specific_file_path: Chemin vers un fichier JSON de profil sp√©cifique √† analyser.
                                Si None, le script cherchera le fichier le plus r√©cent.
        """
        print("üöÄ D√©marrage de la synth√®se compl√®te du profil LinkedIn...")
        print("=" * 60)

        # 1. Charger les donn√©es du profil
        result = self.load_profile_data(specific_file_path)
        if not result:
            print("‚ùå Processus arr√™t√© : impossible de charger les donn√©es.")
            sys.exit(1)  # Exit with error code

        profile_data, original_filename = result

        # 2. Analyser et synth√©tiser avec le LLM
        summary = self.summarize_with_llm(profile_data)
        if not summary:
            print("‚ùå Processus arr√™t√© : √©chec de l'analyse LLM.")
            sys.exit(1)  # Exit with error code

        # 3. Sauvegarder la synth√®se
        saved_file = self.save_summary(summary, original_filename)
        if not saved_file:
            print("‚ùå Processus arr√™t√© : √©chec de la sauvegarde.")
            sys.exit(1)  # Exit with error code

        print("=" * 60)
        print("üéâ SYNTH√àSE TERMIN√âE AVEC SUCC√àS !")
        print(f"üìÑ Fichier g√©n√©r√© : {saved_file}")
        sys.exit(0)  # Exit successfully


def main():
    """Fonction principale pour ex√©cuter l'agent."""
    print("‚ú® AGENT DE SYNTH√àSE DE PROFILS LINKEDIN ‚ú®")
    print("=" * 45)
    print("Ce programme analyse un fichier de profil JSON.")
    print("=" * 45)

    try:
        agent = LinkedInProfileSummarizer()

        # V√©rifie si un chemin de fichier est fourni en argument
        if len(sys.argv) > 1:
            specific_file = sys.argv[1]
            agent.run_complete_summary(specific_file)
        else:
            print("üí° Aucun chemin de fichier sp√©cifi√©. Recherche du fichier le plus r√©cent.")
            agent.run_complete_summary()

    except ValueError as e:
        print(f"\n‚ùå Erreur de configuration: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Une erreur inattendue est survenue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
